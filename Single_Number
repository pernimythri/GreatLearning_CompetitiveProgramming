Time Complexity - O(n*n)
Space Complexity - O(1)

***First Approach

import java.util.*;
class Solution
{
    int singleNumber(int[] arr)
    {
        for(int i=0;i<arr.length;i++)
        {
            int flag=0;
            for(int j=0;j<arr.length;j++)
            {
                if((i!=j) && (arr[i]==arr[j]))
                {
                    flag=1;
                }
            }
            if(flag==0)
            return arr[i];
        }
        return -1;
    }
    public static void main(String args[])
    {
        Solution obj=new Solution();
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int[] arr=new int[n];
        for(int i=0;i<n;i++)
        {
            arr[i]=sc.nextInt();
        }
        System.out.println(obj.singleNumber(arr));
    }
}


---------------------------------------------------------------------------------------------------------------------------------
Time Complexity - O(NlogN)

*** Second Approach
import java.util.*;
class Solution
{
    int singleNumber(int[] arr)
    {
        
        Arrays.sort(arr);
        if(arr.length==1)
        return arr[0];
        
        for(int i=0;i<arr.length-1;i+=2)
        {
            if(arr[i]!=arr[i+1])
            return arr[i];

        }
        return arr[arr.length-1];
    
    }

    public static void main(String args[])
    {
        Solution obj=new Solution();
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int[] arr=new int[n];
        for(int i=0;i<n;i++)
        {
            arr[i]=sc.nextInt();
        }
        System.out.println(obj.singleNumber(arr));
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------
Time Complexity - O(N)

*** Third Approach

import java.util.*;
class Solution
{
    int singleNumber(int[] nums)
    {
        
        HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
        for(int i:nums)
        {
            map.put(i,map.getOrDefault(i,0)+1);
        }
        for (int num : nums) {
            if (map.get(num) == 1) {
                return num;
            }
        }
        return -1;
    
    }

    public static void main(String args[])
    {
        Solution obj=new Solution();
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int[] arr=new int[n];
        for(int i=0;i<n;i++)
        {
            arr[i]=sc.nextInt();
        }
        System.out.println(obj.singleNumber(arr));
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------

Time Complexity - O(n)

*** Fourth Approach

import java.util.*;
class Solution
{
    int singleNumber(int[] nums)
    {
        int res=0;
    for(int i=0;i<nums.length;i++)
    {
        res ^=nums[i];
    }
    return res;
    }
    
    

    public static void main(String args[])
    {
        Solution obj=new Solution();
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int[] arr=new int[n];
        for(int i=0;i<n;i++)
        {
            arr[i]=sc.nextInt();
        }
        System.out.println(obj.singleNumber(arr));
    }
}

